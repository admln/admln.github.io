{"title":"github repo:Shellcrypt","date":"2023-01-05T15:16:53.000Z","date_formatted":{"ll":"Jan 5, 2023","L":"01/05/2023","MM-DD":"01-05"},"link":"2023/01/05/github-repo-Shellcrypt","tags":["Github","SecTool"],"updated":"2023-01-05T08:38:13.294Z","content":"<h1 id=\"来源\">来源<a title=\"#来源\" href=\"#来源\"></a></h1>\n<p><a href=\"https://github.com/iilegacyyii/Shellcrypt\" target=\"_blank\">https://github.com/iilegacyyii/Shellcrypt</a></p>\n<p>对ShellCode进行指定加密算法和秘钥进行加密混淆，并按照指定格式输出；</p>\n<p>用这东西不仅需要python环境，还需要导入一些库，为什么不直接用msfvenom？</p>\n<h1 id=\"解析\">解析<a title=\"#解析\" href=\"#解析\"></a></h1>\n<h2 id=\"加密\">加密<a title=\"#加密\" href=\"#加密\"></a></h2>\n<p>除了XOR使用自循环异或外，其他五个都用了python Crypto库；</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Cipher <span class=\"keyword\">import</span> AES, ARC4, ChaCha20, Salsa20</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>xor</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"built_in\">bytearray</span>(a ^ b <span class=\"keyword\">for</span> (a, b) <span class=\"keyword\">in</span> <span class=\"built_in\">zip</span>(plaintext, cycle(self.key)))</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>aes_128</p>\n</blockquote>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aes_cipher = AES.new(self.key, AES.MODE_CBC, self.nonce)</span><br><span class=\"line\">plaintext = pad(plaintext, <span class=\"number\">16</span>)</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"built_in\">bytearray</span>(aes_cipher.encrypt(plaintext))</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>rc4</p>\n</blockquote>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rc4_cipher = ARC4.new(self.key)</span><br><span class=\"line\"><span class=\"keyword\">return</span> rc4_cipher.encrypt(plaintext)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>chacha20</p>\n</blockquote>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chacha20_cipher = ChaCha20.new(key=self.key)</span><br><span class=\"line\"><span class=\"keyword\">return</span> chacha20_cipher.encrypt(plaintext) </span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>salsa20</p>\n</blockquote>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">salsa20_cipher = Salsa20.new(key=key)</span><br><span class=\"line\"><span class=\"keyword\">return</span> salsa20_cipher.encrypt(plaintext)</span><br></pre></td></tr></table></figure>\n<h2 id=\"输出\">输出<a title=\"#输出\" href=\"#输出\"></a></h2>\n<p>指定输出改变的不是加密后的SHELLCODE本身，只是变量格式，按照指定编程语言的变量声明方式输出出来而已：</p>\n<img src=\"/2023/01/05/github-repo-Shellcrypt/2023/01/05/github-repo-Shellcrypt/2023-01-05-15-31-52-image.png\" class>\n<h1 id=\"学习\">学习<a title=\"#学习\" href=\"#学习\"></a></h1>\n<ol>\n<li>\n<p>几种加密算法和py实现方式；</p>\n</li>\n<li>\n<p>动态执行函数的另外一种方式；</p>\n<p>之前用过eval：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">exec_something</span>():</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">dynamic_method = <span class=\"string\">&quot;exec_somthing&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">eval</span>(dynamic_method+<span class=\"string\">&#x27;()&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p>这次学习到还可以这样用：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">    self.__handlers = &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;method1&quot;</span>: self.test_method1,</span><br><span class=\"line\">    <span class=\"string\">&quot;method2&quot;</span>: self.test_method2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_method1</span>():</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_method2</span>():</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n<p>#call<br>\nmethod = “method2”<br>\nself.__handlers<a href>method</a></p>\n</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3. 没用过另外一种打印表达式；</span><br><span class=\"line\"></span><br><span class=\"line\">```py</span><br><span class=\"line\">w = 2</span><br><span class=\"line\">print(&#x27;%.2f&#x27; %w)</span><br><span class=\"line\">print(f&#x27;w = &#123;w:.2f&#125;&#x27;)</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>\n<p>简单if/else判断的单行使用方式；</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">num = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(num <span class=\"keyword\">if</span> num &gt; <span class=\"number\">0</span> <span class=\"keyword\">else</span> num++)</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>简单for循环的单行使用方式；</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">array = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(num++ <span class=\"keyword\">for</span> num <span class=\"keyword\">in</span> array)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n","prev":{"title":"test test:test","link":"2023/01/05/test-test-test"},"next":{"title":"github repo:FCDN","link":"2023/01/04/github-repo-FCDN"},"plink":"https://admln.github.io/2023/01/05/github-repo-Shellcrypt/","toc":[{"id":"来源","title":"来源","index":"1"},{"id":"解析","title":"解析","index":"2","children":[{"id":"加密","title":"加密","index":"2.1"},{"id":"输出","title":"输出","index":"2.2"}]},{"id":"学习","title":"学习","index":"3"}],"copyright":{"published":"January 5, 2023","author":"Daemon X","link":"<a href=\"https://admln.github.io/2023/01/05/github-repo-Shellcrypt/\" title=\"github repo:Shellcrypt\">https://admln.github.io/2023/01/05/github-repo-Shellcrypt/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"},"reading_time":"405 words in 3 min"}